<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeChecker</name>
    </assembly>
    <members>
        <member name="T:CodeChecker.Argument">
            <summary>
            Checker class for argument.
            </summary>
        </member>
        <member name="T:CodeChecker.Argument.Assume">
            <summary>
            Assume check class.
            </summary>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NotNull``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value (<see cref="T:System.String"/>) is null or empty.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.Is``1(System.Object,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is not type of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.Null``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.Null``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is not null.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.NullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Assume.That(System.Boolean,System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the condition is false.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="T:CodeChecker.Argument.Require">
            <summary>
            Require check class.
            </summary>
        </member>
        <member name="M:CodeChecker.Argument.Require.NotNull``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> if the value (<see cref="T:System.String"/>) is null or empty.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.ArgumentNullException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:System.ArgumentNullException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.ArgumentNullException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.Is``1(System.Object,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the value is not type of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.Null``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.Null``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the value is not null.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.NullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="M:CodeChecker.Argument.Require.That(System.Boolean,System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.ArgumentException"/> if the condition is false.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:System.ArgumentException">.</exception>
        </member>
        <member name="F:CodeChecker.CheckType.Required">
            <summary>
            Required that throw the exception if the check is failed.
            </summary>
        </member>
        <member name="F:CodeChecker.CheckType.Assume">
            <summary>
            Assume that the check will not faile, otherwise throw internal exception.
            </summary>
        </member>
        <member name="F:CodeChecker.CheckType.NotRequired">
            <summary>
            Not throwing an exception if the check fail.
            </summary>
        </member>
        <member name="F:CodeChecker.CheckType.Validation">
            <summary>
            Validation check (for model validation).
            </summary>
        </member>
        <member name="F:CodeChecker.CheckLevel.Argument">
            <summary>
            Check has been done for argument (or data input).
            </summary>
        </member>
        <member name="F:CodeChecker.CheckLevel.Operation">
            <summary>
            Check has been done in a method.
            </summary>
        </member>
        <member name="F:CodeChecker.CheckLevel.Data">
            <summary>
            Check has been done for validate data.
            </summary>
        </member>
        <member name="T:CodeChecker.Data">
            <summary>
            Checker class for data or variable.
            </summary>
        </member>
        <member name="T:CodeChecker.Data.Assume">
            <summary>
            Assume check class.
            </summary>
        </member>
        <member name="M:CodeChecker.Data.Assume.NotNull``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the value (<see cref="T:System.String"/>) is null or empty.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:CodeChecker.InternalCheckException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:CodeChecker.InternalCheckException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.Is``1(System.Object,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not type of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.Null``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.Null``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.NullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.That(System.Boolean,System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the condition is false.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Assume.True(System.Boolean,System.String,System.Boolean)">
            <summary>
            Check if the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.Exception"/> if true.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:CodeChecker.Data.Assume.False(System.Boolean,System.String,System.Boolean)">
            <summary>
            Check if the condition is false.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.Exception"/> if true.</param>
            <returns>True or False.</returns>
        </member>
        <member name="T:CodeChecker.Data.Require">
            <summary>
            Require check class.
            </summary>
        </member>
        <member name="M:CodeChecker.Data.Require.NotNull``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:System.NullReferenceException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.NullReferenceException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:System.NullReferenceException"/> if the value is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.NullReferenceException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:System.NullReferenceException"/> if the value (<see cref="T:System.String"/>) is null or empty.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.NullReferenceException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:System.NullReferenceException"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.NullReferenceException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:System.NullReferenceException"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.NullReferenceException">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.Is``1(System.Object,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not type of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns><typeparamref name="T"/> value.</returns>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.Null``1(``0,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.Null``1(System.Nullable{``0},System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NullOrEmpty(System.String,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the value is not null.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the values (<see cref="T:System.Collections.Generic.ICollection`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.NullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the values (<see cref="T:System.Collections.Generic.IEnumerable`1"/>) is not null or empty.
            </summary>
            <typeparam name="T"><typeparamref name="T"/>.</typeparam>
            <param name="values">Value to be tested.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="M:CodeChecker.Data.Require.That(System.Boolean,System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.Exception"/> if the condition is false.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:System.Exception">.</exception>
        </member>
        <member name="T:CodeChecker.InternalChecker">
            <summary>
            Internal checker class used to provide check methods.
            </summary>
        </member>
        <member name="M:CodeChecker.InternalChecker.Fail(System.Boolean,System.String,CodeChecker.CheckType,CodeChecker.CheckLevel,System.Boolean)">
            <summary>
            Throw an exception with the message specified in parameter.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="message">The message of exception.</param>
            <param name="checkType">The <see cref="T:CodeChecker.CheckType"/> executed.</param>
            <param name="checkLevel">The <see cref="T:CodeChecker.CheckLevel"/> executed.</param>
            <param name="nullCheck">Define if we do a null (data/input) check.</param>
        </member>
        <member name="T:CodeChecker.InternalCheckException">
            <summary>
            Internal exception used by <see cref="T:CodeChecker.Argument"/>, <see cref="T:CodeChecker.Operation"/> and <see cref="T:CodeChecker.Data"/> checker.
            </summary>
        </member>
        <member name="T:CodeChecker.Operation">
            <summary>
            Checker class used for operation.
            </summary>
        </member>
        <member name="M:CodeChecker.Operation.ThrowIf(System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.InvalidOperationException"/> if the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <exception cref="T:System.InvalidOperationException">.</exception>
        </member>
        <member name="M:CodeChecker.Operation.That(System.Boolean,System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.InvalidOperationException"/> if the condition is false.
            </summary>
            <param name="condition">Condition to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:System.InvalidOperationException">.</exception>
        </member>
        <member name="M:CodeChecker.Operation.True(System.Boolean,System.String,System.Boolean)">
            <summary>
            Check if the condition is true.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.InvalidOperationException"/> if true.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:CodeChecker.Operation.False(System.Boolean,System.String,System.Boolean)">
            <summary>
            Check if the condition is false.
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.InvalidOperationException"/> if true.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:CodeChecker.Operation.That(System.Func{System.Boolean},System.Boolean,System.String)">
            <summary>
            Throw an <see cref="T:System.InvalidOperationException"/> if the condition is false.
            </summary>
            <param name="function">Function to evaluate.</param>
            <param name="throwException">Exception if true..</param>
            <param name="message">Message to show on the exception.</param>
            <exception cref="T:System.InvalidOperationException">.</exception>
        </member>
        <member name="M:CodeChecker.Operation.True(System.Func{System.Boolean},System.String,System.Boolean)">
            <summary>
            Check if the condition is true.
            </summary>
            <param name="function">Function to evaluate.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.InvalidOperationException"/> if true.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:CodeChecker.Operation.False(System.Func{System.Boolean},System.String,System.Boolean)">
            <summary>
            Check if the condition is false.
            </summary>
            <param name="function">Function to evaluate.</param>
            <param name="message">The message to show if the exception is throwned.</param>
            <param name="throwException">Throw an <see cref="T:System.InvalidOperationException"/> if true.</param>
            <returns>True or False.</returns>
        </member>
    </members>
</doc>
